package memfs

// Code generated by mocker. DO NOT EDIT.

import (
	"io/fs"

	"github.com/ctx42/testing/pkg/mock"
	"github.com/ctx42/testing/pkg/tester"
)

type FSMock struct {
	*mock.Mock
	t tester.T
}

func NewFSMock(t tester.T) *FSMock {
	t.Helper()
	return &FSMock{Mock: mock.NewMock(t), t: t}
}

func (_mck *FSMock) Open(name string) (fs.File, error) {
	_mck.t.Helper()
	_args := []any{name}
	_rets := _mck.Called(_args...)
	if len(_rets) != 2 {
		_mck.t.Fatal("the number of mocked method returns does not match")
	}

	var _r0 fs.File
	if _rFn, ok := _rets.Get(0).(func(string) fs.File); ok {
		_r0 = _rFn(name)
	} else if _r := _rets.Get(0); _r != nil {
		_r0 = _r.(fs.File)
	}
	var _r1 error
	if _rFn, ok := _rets.Get(1).(func(string) error); ok {
		_r1 = _rFn(name)
	} else if _r := _rets.Get(1); _r != nil {
		_r1 = _r.(error)
	}
	return _r0, _r1
}

func (_mck *FSMock) OnOpen(name any) *mock.Call {
	_mck.t.Helper()
	_args := []any{name}
	return _mck.On("Open", _args...)
}
